{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaporation Trend Examination\n",
    "\n",
    "### Background\n",
    "Global warming is a currently popular and hotly (pun intended) debated issue. \n",
    "The usual evidence is temperature data presented as a time series with various temporal correlations to industrial activity and so forth. The increase in the global temperature is not disputed - what it means for society and how to respond is widely disputed.\n",
    "\n",
    "One possible consequence of warming, regardless of the cause is an expectation that\n",
    "<strong>evaportation rates would increase</strong> and temperate regions would experience more\n",
    "drought and famine, and firm water yields would drop. \n",
    "\n",
    "However in a paper by Peterson and others (1995) the authors concluded from analysis of pan evaporation data in various parts of the world, that there has been a <strong>downward trend in evaporation</strong> at a significance level of 99%. \n",
    "Pan evaporation is driven as much by direct solar radiation (sun shining on water) as by surrounding air temperature.\n",
    "\n",
    "Global dimming is defined as the decrease in the amounts of solar radiation reaching the surface of the Earth. The by-product of fossil fuels is tiny particles or pollutants which absorb solar energy and reflect back sunlight into space. This phenomenon was first recognized in the year 1950. Scientists believe that since 1950, the sun’s energy reaching Earth has dropped by 9% in Antarctica, 10% in the USA, 16% in parts of Europe and 30% in Russia – putting the overall average drop to be at an enormous 22%. This causes a high risk to our environment.\n",
    "\n",
    "Aerosols have been found to be the major cause of global dimming. The burning of fossil fuels by industry and internal combustion engines emits by-products such as sulfur dioxide, soot, and ash. These together form particulate pollution—primarily called aerosols. Aerosols act as a precursor to global dimming in the following two ways:\n",
    "\n",
    "These particle matters enter the atmosphere and directly absorb solar energy and reflect radiation back into space before it reaches the planet’s surface.\n",
    "Water droplets containing these air-borne particles form polluted clouds. These polluted clouds have a heavier and larger number of droplets. These changed properties of the cloud – such clouds are called ‘brown clouds’ – makes them more reflective.\n",
    "Vapors emitted from the planes flying high in the sky called contrails are another cause of heat reflection and related global dimming.\n",
    "\n",
    "Both global dimming and global warming have been happening all over the world and together they have caused severe changes in the rainfall patterns. It is also believed that it was global dimming behind the 1984 Saharan drought that killed millions of people in sub-Saharan Africa. Scientists believe that despite the cooling effect created by global dimming, the earth’s temperature has increased by more than 1 deg. in the last century.\n",
    "\n",
    "### References\n",
    "\n",
    "Peterson, T.C., Golubev, V.S. and Groisman, P. Ya. 1995. Evaporation\n",
    "losing its strength. Nature 377: 687-688.\n",
    "\n",
    "https://www.conserve-energy-future.com/causes-and-effects-of-global-dimming.php\n",
    "\n",
    "## Example Problem \n",
    "In Texas, evaporation rates (reported as inches per month) are available from the Texas Water Development Board.\n",
    "https://waterdatafortexas.org/lake-evaporation-rainfall\n",
    "The map below shows the quadrants (grid cells) for which data are tabulated.\n",
    "\n",
    "![figure1](EvapMap.png)\n",
    "\n",
    "Cell '911' is located between Corpus Christi and Houston in the Coastal Plains of Texas.  A copy of the dataset downloaded from the Texas Water Development Board is located at http://www.rtfmps.com/share_files/all_quads_gross_evaporation.csv\n",
    "\n",
    "Using naive data science anlayze the data for Cell '911' and decide if the conclusions by Peterson and others (1995) are supported by this data.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exploratory Analysis\n",
    "To analyze these data a first step is to obtain the data.  The knowlwdge that the data are arranged in a file with a ``.csv`` extension is a clue how to proceede.  We will need a module to interface with the remote server, in this example lets use something different than ``urllib``. Here we will use ``requests`` , so first we load the module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests # Module to process http/https requests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we will generate a ``GET`` request to the remote http server.  I chose to do so using a variable to store the remote URL so I can reuse code in future projects.  The ``GET`` request (an http/https method) is generated with the requests method ``get`` and assigned to an object named ``rget`` -- the name is arbitrary.  Next we extract the file from the ``rget`` object and write it to a local file with the name of the remote file - esentially automating the download process. Then we import the ``pandas`` module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "remote_url=\"http://atomickitty.ddns.net/documents/shared-databases/all_quads_gross_evaporation.csv\"  # set the url\n",
    "rget = requests.get(remote_url, allow_redirects=True)  # get the remote resource, follow imbedded links\n",
    "open('all_quads_gross_evaporation.csv','wb').write(rget.content) # extract from the remote the contents, assign to a local file same name\n",
    "import pandas as pd # Module to process dataframes (not absolutely needed but somewhat easier than using primatives, and gives graphing tools)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can read the file contents and check its structure, before proceeding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YYYY-MM</th>\n",
       "      <th>104</th>\n",
       "      <th>105</th>\n",
       "      <th>106</th>\n",
       "      <th>107</th>\n",
       "      <th>108</th>\n",
       "      <th>204</th>\n",
       "      <th>205</th>\n",
       "      <th>206</th>\n",
       "      <th>207</th>\n",
       "      <th>...</th>\n",
       "      <th>911</th>\n",
       "      <th>912</th>\n",
       "      <th>1008</th>\n",
       "      <th>1009</th>\n",
       "      <th>1010</th>\n",
       "      <th>1011</th>\n",
       "      <th>1108</th>\n",
       "      <th>1109</th>\n",
       "      <th>1110</th>\n",
       "      <th>1210</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1954-01-01</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.80</td>\n",
       "      <td>2.02</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.24</td>\n",
       "      <td>2.34</td>\n",
       "      <td>1.89</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.99</td>\n",
       "      <td>...</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.30</td>\n",
       "      <td>2.50</td>\n",
       "      <td>2.42</td>\n",
       "      <td>1.94</td>\n",
       "      <td>1.29</td>\n",
       "      <td>2.59</td>\n",
       "      <td>2.49</td>\n",
       "      <td>2.22</td>\n",
       "      <td>2.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1954-02-01</td>\n",
       "      <td>4.27</td>\n",
       "      <td>4.27</td>\n",
       "      <td>4.13</td>\n",
       "      <td>3.98</td>\n",
       "      <td>3.90</td>\n",
       "      <td>4.18</td>\n",
       "      <td>4.26</td>\n",
       "      <td>4.27</td>\n",
       "      <td>4.26</td>\n",
       "      <td>...</td>\n",
       "      <td>2.59</td>\n",
       "      <td>2.51</td>\n",
       "      <td>4.71</td>\n",
       "      <td>4.30</td>\n",
       "      <td>3.84</td>\n",
       "      <td>2.50</td>\n",
       "      <td>5.07</td>\n",
       "      <td>4.62</td>\n",
       "      <td>4.05</td>\n",
       "      <td>4.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1954-03-01</td>\n",
       "      <td>4.98</td>\n",
       "      <td>4.98</td>\n",
       "      <td>4.62</td>\n",
       "      <td>4.25</td>\n",
       "      <td>4.20</td>\n",
       "      <td>5.01</td>\n",
       "      <td>4.98</td>\n",
       "      <td>4.98</td>\n",
       "      <td>4.68</td>\n",
       "      <td>...</td>\n",
       "      <td>3.21</td>\n",
       "      <td>3.21</td>\n",
       "      <td>6.21</td>\n",
       "      <td>6.06</td>\n",
       "      <td>5.02</td>\n",
       "      <td>3.21</td>\n",
       "      <td>6.32</td>\n",
       "      <td>6.20</td>\n",
       "      <td>5.68</td>\n",
       "      <td>5.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1954-04-01</td>\n",
       "      <td>6.09</td>\n",
       "      <td>5.94</td>\n",
       "      <td>5.94</td>\n",
       "      <td>6.07</td>\n",
       "      <td>5.27</td>\n",
       "      <td>6.31</td>\n",
       "      <td>5.98</td>\n",
       "      <td>5.89</td>\n",
       "      <td>5.72</td>\n",
       "      <td>...</td>\n",
       "      <td>3.83</td>\n",
       "      <td>3.54</td>\n",
       "      <td>6.45</td>\n",
       "      <td>6.25</td>\n",
       "      <td>4.92</td>\n",
       "      <td>3.54</td>\n",
       "      <td>6.59</td>\n",
       "      <td>6.44</td>\n",
       "      <td>5.88</td>\n",
       "      <td>5.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1954-05-01</td>\n",
       "      <td>5.41</td>\n",
       "      <td>5.09</td>\n",
       "      <td>5.14</td>\n",
       "      <td>4.40</td>\n",
       "      <td>3.61</td>\n",
       "      <td>5.57</td>\n",
       "      <td>4.56</td>\n",
       "      <td>4.47</td>\n",
       "      <td>4.18</td>\n",
       "      <td>...</td>\n",
       "      <td>3.48</td>\n",
       "      <td>3.97</td>\n",
       "      <td>7.92</td>\n",
       "      <td>8.13</td>\n",
       "      <td>6.31</td>\n",
       "      <td>3.99</td>\n",
       "      <td>7.75</td>\n",
       "      <td>7.98</td>\n",
       "      <td>7.40</td>\n",
       "      <td>7.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 93 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     YYYY-MM   104   105   106   107   108   204   205   206   207  ...   911  \\\n",
       "0 1954-01-01  1.80  1.80  2.02  2.24  2.24  2.34  1.89  1.80  1.99  ...  1.42   \n",
       "1 1954-02-01  4.27  4.27  4.13  3.98  3.90  4.18  4.26  4.27  4.26  ...  2.59   \n",
       "2 1954-03-01  4.98  4.98  4.62  4.25  4.20  5.01  4.98  4.98  4.68  ...  3.21   \n",
       "3 1954-04-01  6.09  5.94  5.94  6.07  5.27  6.31  5.98  5.89  5.72  ...  3.83   \n",
       "4 1954-05-01  5.41  5.09  5.14  4.40  3.61  5.57  4.56  4.47  4.18  ...  3.48   \n",
       "\n",
       "    912  1008  1009  1010  1011  1108  1109  1110  1210  \n",
       "0  1.30  2.50  2.42  1.94  1.29  2.59  2.49  2.22  2.27  \n",
       "1  2.51  4.71  4.30  3.84  2.50  5.07  4.62  4.05  4.18  \n",
       "2  3.21  6.21  6.06  5.02  3.21  6.32  6.20  5.68  5.70  \n",
       "3  3.54  6.45  6.25  4.92  3.54  6.59  6.44  5.88  5.95  \n",
       "4  3.97  7.92  8.13  6.31  3.99  7.75  7.98  7.40  7.40  \n",
       "\n",
       "[5 rows x 93 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "evapdf = pd.read_csv(\"all_quads_gross_evaporation.csv\",parse_dates=[\"YYYY-MM\"]) # Read the file as a .CSV assign to a dataframe evapdf\n",
    "evapdf.head() # check structure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Structure looks like a spreadsheet as expected; lets plot the time series for cell '911'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f498f611350>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXIAAAEGCAYAAAB4lx7eAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nOy9e5gtWVUnuHbEOScz76vePEss0BEKSh7d1YLoqLQyPd2oNEPPp5/a39gffrSDOGr3N4KPVltshR5awREZEQUboUGgAC2weBdvCur9piiqiqpbr3vrvvLevJl5zonY88eOtddv7b3OIzNPvu6N9c/JjBMnYseOiLV/+7d+a23nvafWWmuttdZ2rxXb3YDWWmuttdY2Zq0jb6211lrb5dY68tZaa621XW6tI2+ttdZa2+XWOvLWWmuttV1unc046IUXXugvueSSzTh0a6211toZadddd91j3vuL1vPbTXHkl1xyCV177bWbcejWWmuttTPSnHPfXu9vW2qltdZaa22XW+vIW2uttdZ2ubWOvLXWWmttl9umcOSttdZaaxu1wWBABw8epJWVle1uykxtfn6eLr74Yup2uzM7ZuvIW2uttR1pBw8epP3799Mll1xCzrntbs5MzHtPR44coYMHD9JTn/rUmR23pVZaa621HWkrKyt0wQUXnDFOnIjIOUcXXHDBzGcZrSNvrbXWdqydSU6cbTOuqXXkrbW2xfbhGx6kU6vD7W5Ga2eQtY68tda20G564Dj96vtupN/+0C3b3ZTWprQ3v/nNdNlll9GznvUsetOb3kRERO9///vpWc96FhVFoZIfjxw5Qi960Yto37599OpXv3rL2tg68tZa20JbapD4o4ur29yS1qaxW2+9lf7yL/+Svva1r9FNN91EV155JX3zm9+kyy67jK644gr6oR/6IbX//Pw8ve51r6M3vvGNW9rO1pG31toWWrse1+6yO+64g17wghfQnj17qNPp0A//8A/Thz70Ibr00kvp6U9/erb/3r176Qd/8Adpfn5+S9vZyg9ba20LrW6WVixaCLUm+8//cBvd/tDiTI/5zCcdoN/9iWeN3eeyyy6j3/qt36IjR47QwsICfexjH6PLL798pu2YhbWOvLXWttB4iVxHZ54a40y0Sy+9lF7zmtfQi1/8Ytq3bx895znPoU5n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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "evapdf.plot.line(x='YYYY-MM',y='911') # Plot quadrant 911 evaporation time series "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can see that the signal indeed looks like it is going up at its mean value then back down. Lets try a moving average over 12-month windows. The syntax is a bit weird, but it should dampen the high frequency (monthly) part of the signal.  Sure enough there is a downaward trend at about month 375, which we recover the date using the index -- in this case around 1985.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('1985-04-01 00:00:00')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "movingAvg=evapdf['911'].rolling(12, win_type ='boxcar').mean()\n",
    "movingAvg\n",
    "movingAvg.plot.line(x='YYYY-MM',y='911')\n",
    "evapdf['YYYY-MM'][375]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So now lets split the dataframe at April 1985.  Here we will build two objects and can compare them.  Notice how we have split into two entire dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     YYYY-MM   104   105   106   107   108   204   205   206   207  ...   911  \\\n",
      "0 1954-01-01  1.80  1.80  2.02  2.24  2.24  2.34  1.89  1.80  1.99  ...  1.42   \n",
      "1 1954-02-01  4.27  4.27  4.13  3.98  3.90  4.18  4.26  4.27  4.26  ...  2.59   \n",
      "2 1954-03-01  4.98  4.98  4.62  4.25  4.20  5.01  4.98  4.98  4.68  ...  3.21   \n",
      "3 1954-04-01  6.09  5.94  5.94  6.07  5.27  6.31  5.98  5.89  5.72  ...  3.83   \n",
      "4 1954-05-01  5.41  5.09  5.14  4.40  3.61  5.57  4.56  4.47  4.18  ...  3.48   \n",
      "\n",
      "    912  1008  1009  1010  1011  1108  1109  1110  1210  \n",
      "0  1.30  2.50  2.42  1.94  1.29  2.59  2.49  2.22  2.27  \n",
      "1  2.51  4.71  4.30  3.84  2.50  5.07  4.62  4.05  4.18  \n",
      "2  3.21  6.21  6.06  5.02  3.21  6.32  6.20  5.68  5.70  \n",
      "3  3.54  6.45  6.25  4.92  3.54  6.59  6.44  5.88  5.95  \n",
      "4  3.97  7.92  8.13  6.31  3.99  7.75  7.98  7.40  7.40  \n",
      "\n",
      "[5 rows x 93 columns]\n",
      "       YYYY-MM   104    105    106   107   108   204    205    206   207  ...  \\\n",
      "375 1985-04-01  5.31   6.27   6.75  6.92  4.76  5.32   6.72   6.83  7.04  ...   \n",
      "376 1985-05-01  4.80   5.64   5.51  5.47  5.43  4.90   6.62   6.37  6.13  ...   \n",
      "377 1985-06-01  6.61   9.00   9.05  8.66  8.33  6.39   8.62   8.33  7.55  ...   \n",
      "378 1985-07-01  7.21  10.99  11.10  9.73  8.56  7.30  10.11  10.33  9.40  ...   \n",
      "379 1985-08-01  6.56   9.66   9.76  8.48  7.38  6.31   8.85   8.55  7.45  ...   \n",
      "\n",
      "      911   912  1008  1009  1010  1011  1108  1109  1110  1210  \n",
      "375  4.16  4.45  5.26  5.06  4.91  4.41  6.24  5.58  4.81  4.63  \n",
      "376  5.87  5.17  5.19  5.66  5.69  5.86  5.63  5.59  5.63  5.71  \n",
      "377  6.60  6.46  5.91  5.98  6.03  6.41  6.33  6.17  6.38  6.12  \n",
      "378  7.56  6.64  6.50  7.18  7.09  7.41  7.10  7.18  7.13  7.27  \n",
      "379  8.37  6.93  7.76  8.44  8.72  8.52  8.09  7.94  8.35  8.57  \n",
      "\n",
      "[5 rows x 93 columns]\n"
     ]
    }
   ],
   "source": [
    "evB485loc = evapdf['YYYY-MM']<'1985-04'  # filter before 1985\n",
    "evB485 = evapdf[evB485loc]\n",
    "ev85uploc = evapdf['YYYY-MM']>='1985-04' # filter after 1985\n",
    "ev85up= evapdf[ev85uploc]\n",
    "print(evB485.head())\n",
    "print(ev85up.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets get some simple descriptions of the two objects, and we will ignore thay they are time series."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    375.000000\n",
       "mean       4.202480\n",
       "std        1.774273\n",
       "min        1.260000\n",
       "25%        2.665000\n",
       "50%        3.900000\n",
       "75%        5.455000\n",
       "max        8.800000\n",
       "Name: 911, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "evB485['911'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    417.000000\n",
       "mean       4.167458\n",
       "std        1.676704\n",
       "min        1.230000\n",
       "25%        2.680000\n",
       "50%        4.160000\n",
       "75%        5.410000\n",
       "max        9.560000\n",
       "Name: 911, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ev85up['911'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we look at the means, the after 1985 is lower, and the SD about the same, so there is maybe support of the paper claims, but the median has increased while the IQR is practically unchanged.  We can produce boxplots from the two objects and see they are different, but not by much.  So the conclusion of the paper has support but its pretty weak and hardly statisticlly significant. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f498e59dcd0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "evB485['911'].plot.box();ev85up['911'].plot.box()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At this point, we would appeal to hypothesis testing or some other serious statistical analysis tools.  Lets try a favorite (of mine) non-paramatric test called the ``mannwhitneyu`` test.  \n",
    "\n",
    "### Background\n",
    "In statistics, the Mann–Whitney U test (also called the Mann–Whitney–Wilcoxon (MWW), Wilcoxon rank-sum test, or Wilcoxon–Mann–Whitney test) is a nonparametric test of the null hypothesis that it is equally likely that a randomly selected value from one population will be less than or greater than a randomly selected value from a second population.\n",
    "\n",
    "This test can be used to investigate whether two independent samples were selected from populations having the same distribution.\n",
    "\n",
    "## Application\n",
    "As usual we need to import necessary tools, in this case scipy.stats.  Based on the module name, it looks like a collection of methods (the dot ``.`` is the giveaway).  The test itself is applied to the two objects, if there is a statistical change in behavior we expect the two collections of records to be different."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "statistic=78184.500, p-value at rejection =0.500\n",
      "Probably the same distribution\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import mannwhitneyu # import a useful non-parametric test\n",
    "stat, p = mannwhitneyu(evB485['911'],ev85up['911'])\n",
    "print('statistic=%.3f, p-value at rejection =%.3f' % (stat, p))\n",
    "if p > 0.05:\n",
    "\tprint('Probably the same distribution')\n",
    "else:\n",
    "\tprint('Probably different distributions')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If there were indeed a 99% significance level, the p-value should have been smaller than 0.05 (two-tailed) and the p-value was quite high.  I usually check that I wrote the script by testing he same distribution against itself, I should get a p-vale of 0.5.  Indeed that's the case.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "statistic=70312.500, p-value at rejection =0.500\n",
      "Probably the same distribution\n"
     ]
    }
   ],
   "source": [
    "stat, p = mannwhitneyu(evB485['911'],evB485['911'])\n",
    "print('statistic=%.3f, p-value at rejection =%.3f' % (stat, p))\n",
    "if p > 0.05:\n",
    "\tprint('Probably the same distribution')\n",
    "else:\n",
    "\tprint('Probably different distributions')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets repeat the analysis but break in 1992 when Clean Air Act rules were slightly relaxed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "evB492loc = evapdf['YYYY-MM']<'1992'  # filter before 1992\n",
    "evB492 = evapdf[evB492loc]\n",
    "ev92uploc = evapdf['YYYY-MM']>='1992' # filter after 1992\n",
    "ev92up= evapdf[ev92uploc]\n",
    "#print(evB492.head())\n",
    "#print(ev92up.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "statistic=72195.000, p-value at rejection =0.083\n",
      "Probably the same distribution\n"
     ]
    }
   ],
   "source": [
    "stat, p = mannwhitneyu(evB492['911'],ev92up['911'])\n",
    "print('statistic=%.3f, p-value at rejection =%.3f' % (stat, p))\n",
    "if p > 0.05:\n",
    "\tprint('Probably the same distribution')\n",
    "else:\n",
    "\tprint('Probably different distributions')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So even considering the key date of 1992, there is marginal evidence for the claims (for a single spot in Texas), and one could argue that the claims are confounding -- as an FYI this evevtually was a controversial paper because other researchers obtained similar results using subsets (by location) of the evaporation data.\n",
    "\n",
    "## Homework\n",
    "Using  data science tools anlayze the data for Cell '911' and decide if the conclusions by Peterson and others (1995) are supported by this data. That is, do the supplied data have a significant trend over time in any kind of grouping?\n",
    "\n",
    "Some things you may wish to consider as you design and implement your analysis are:\n",
    "Which summary statistics are relevant? \n",
    "Ignoring the periodic signal, are the data approximately normal? \n",
    "Are the data homoscedastic? \n",
    "What is the trend of the entire dataset (all years)? \n",
    "What is the trend of sequential decades (group data into decades)? \n",
    "What is the trend of sequential 15 year groups? \n",
    "Is there evidence that the slope of any of the trends is zero? \n",
    "At what level of significance?\n",
    "\n",
    "Some additional things to keep in mind:\n",
    "\n",
    "    1. These data are time series; serial correlation is present.\n",
    "    2. An annual-scale periodic signal is present \n",
    "We have not yet discussed time series analysis and periodic signals.\n",
    "Peterson and others (1995) only analyzed May through September data,\n",
    "does using this subset of data change your conclusions?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
